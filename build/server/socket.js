(function() {
  var Server, db, socketio;

  socketio = require("socket.io");

  db = require("./db");

  Server = (function() {
    function Server(port) {
      this.io = socketio(port);
      this.db = new db();
      this.db.debug_flushall();
      this.io.set("authorization", (function(_this) {
        return function(data, accept) {
          var userId;
          userId = data._query.userId;
          if (userId == null) {
            return accept("userId is missing", false);
          } else {
            return accept(null, true);
          }
        };
      })(this));
      this.io.on("connection", (function(_this) {
        return function(socket) {
          var sid, uid;
          sid = socket.id;
          uid = socket.handshake.query.userId;
          _this.db.saveUserId(sid, uid);
          console.log("" + uid + " connected");
          socket.send("Welcome, " + uid);
          socket.broadcast.send("" + uid + " connected");
          socket.on("message", function(msg) {
            return console.log("Message from " + uid + ": " + msg);
          });
          socket.on("message to user", function(to, text) {
            console.log(to, text);
            return _this.db.getSocketIdByUserId(to, function(sid) {
              var toSocket;
              console.log(sid);
              toSocket = _this.io.sockets.connected[sid];
              if (toSocket == null) {
                return socket.emit("messaging error", "" + sid + " is not connected");
              } else {
                return toSocket.emit("message from user", uid, text);
              }
            });
          });
          return socket.on("disconnect", function(socket) {
            _this.db.deleteUserId(sid, uid);
            console.log("" + uid + " disconnected");
            return _this.io.sockets.send("" + uid + " disconnected");
          });
        };
      })(this));
    }

    return Server;

  })();

  module.exports.Server = Server;

}).call(this);

//# sourceMappingURL=data:application/json;base64,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LEVBQXdDLElBQXhDLEVBSEY7ZUFIMEI7WUFBQSxDQUE1QixFQUYyQjtVQUFBLENBQTdCLENBYkEsQ0FBQTtpQkF1QkEsTUFBTSxDQUFDLEVBQVAsQ0FBVSxZQUFWLEVBQXdCLFNBQUMsTUFBRCxHQUFBO0FBQ3RCLFlBQUEsS0FBQyxDQUFBLEVBQUUsQ0FBQyxZQUFKLENBQWlCLEdBQWpCLEVBQXNCLEdBQXRCLENBQUEsQ0FBQTtBQUFBLFlBQ0EsT0FBTyxDQUFDLEdBQVIsQ0FBWSxFQUFBLEdBQUUsR0FBRixHQUFPLGVBQW5CLENBREEsQ0FBQTttQkFFQSxLQUFDLENBQUEsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFaLENBQWlCLEVBQUEsR0FBRSxHQUFGLEdBQU8sZUFBeEIsRUFIc0I7VUFBQSxDQUF4QixFQXhCbUI7UUFBQSxFQUFBO01BQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFyQixDQVpBLENBRFc7SUFBQSxDQUFiOztrQkFBQTs7TUFKRixDQUFBOztBQUFBLEVBOENBLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBZixHQUF3QixNQTlDeEIsQ0FBQTtBQUFBIiwiZmlsZSI6InNvY2tldC5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbInNvY2tldGlvID0gcmVxdWlyZSBcInNvY2tldC5pb1wiXG5kYiA9IHJlcXVpcmUgXCIuL2RiXCJcblxuY2xhc3MgU2VydmVyXG4gIGNvbnN0cnVjdG9yOiAocG9ydCkgLT5cbiAgICBAaW8gPSBzb2NrZXRpbyBwb3J0XG4gICAgQGRiID0gbmV3IGRiKClcblxuICAgIEBkYi5kZWJ1Z19mbHVzaGFsbCgpXG5cbiAgICBAaW8uc2V0IFwiYXV0aG9yaXphdGlvblwiLCAoZGF0YSwgYWNjZXB0KSA9PlxuICAgICAgdXNlcklkID0gZGF0YS5fcXVlcnkudXNlcklkICN1c2VySWQgc2hvdWxkIGNvbWUgd2l0aCBjb25uZWN0aW9uXG4gICAgICBpZiAhdXNlcklkP1xuICAgICAgICBhY2NlcHQgXCJ1c2VySWQgaXMgbWlzc2luZ1wiLCBmYWxzZVxuICAgICAgZWxzZVxuICAgICAgICBhY2NlcHQgbnVsbCwgdHJ1ZVxuXG4gICAgQGlvLm9uIFwiY29ubmVjdGlvblwiLCAoc29ja2V0KSA9PlxuICAgICAgc2lkID0gc29ja2V0LmlkXG4gICAgICB1aWQgPSBzb2NrZXQuaGFuZHNoYWtlLnF1ZXJ5LnVzZXJJZFxuXG4gICAgICBAZGIuc2F2ZVVzZXJJZCBzaWQsIHVpZFxuXG4gICAgICBjb25zb2xlLmxvZyBcIiN7dWlkfSBjb25uZWN0ZWRcIlxuICAgICAgc29ja2V0LnNlbmQgXCJXZWxjb21lLCAje3VpZH1cIlxuICAgICAgc29ja2V0LmJyb2FkY2FzdC5zZW5kIFwiI3t1aWR9IGNvbm5lY3RlZFwiXG5cbiAgICAgIHNvY2tldC5vbiBcIm1lc3NhZ2VcIiwgKG1zZykgPT5cbiAgICAgICAgY29uc29sZS5sb2cgXCJNZXNzYWdlIGZyb20gI3t1aWR9OiAje21zZ31cIlxuXG4gICAgICAjIE1lc3NhZ2UgdG8gdXNlclxuICAgICAgc29ja2V0Lm9uIFwibWVzc2FnZSB0byB1c2VyXCIsICh0bywgdGV4dCkgPT5cbiAgICAgICAgY29uc29sZS5sb2cgdG8sIHRleHRcbiAgICAgICAgQGRiLmdldFNvY2tldElkQnlVc2VySWQgdG8sIChzaWQpID0+XG4gICAgICAgICAgY29uc29sZS5sb2cgc2lkXG4gICAgICAgICAgdG9Tb2NrZXQgPSBAaW8uc29ja2V0cy5jb25uZWN0ZWRbc2lkXVxuICAgICAgICAgIGlmICF0b1NvY2tldD9cbiAgICAgICAgICAgIHNvY2tldC5lbWl0IFwibWVzc2FnaW5nIGVycm9yXCIsIFwiI3tzaWR9IGlzIG5vdCBjb25uZWN0ZWRcIlxuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIHRvU29ja2V0LmVtaXQgXCJtZXNzYWdlIGZyb20gdXNlclwiLCB1aWQsIHRleHRcblxuICAgICAgc29ja2V0Lm9uIFwiZGlzY29ubmVjdFwiLCAoc29ja2V0KSA9PlxuICAgICAgICBAZGIuZGVsZXRlVXNlcklkIHNpZCwgdWlkXG4gICAgICAgIGNvbnNvbGUubG9nIFwiI3t1aWR9IGRpc2Nvbm5lY3RlZFwiXG4gICAgICAgIEBpby5zb2NrZXRzLnNlbmQgXCIje3VpZH0gZGlzY29ubmVjdGVkXCJcblxubW9kdWxlLmV4cG9ydHMuU2VydmVyID0gU2VydmVyXG4iXX0=